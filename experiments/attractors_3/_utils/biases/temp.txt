

func_timebase = lambda t,ts: np.exp((-(t-ts)**2)/(2*50**2))
neu_sync = 10 
delay = 500
index_neu = self.rcn.synapses['virtual_exc'].addr['neu'] == neu_sync 
syn_sync = self.rcn.synapses['virtual_exc'][index_neu]
sync_spikes = syn_sync.spiketrains_regular(200,duration=200)
spiketrain = syn.spiketrains_inh_poisson(new_value,timebins+delay)
stimulus = pyNCS.pyST.merge_sequencers(sync_spikes, spiketrain)
for i in range(3):
    out = nsetup.stimulate(stimulus,send_reset_event=False,duration=duration+delay+1500)
    out = out[0]
    raw_data = out.raw_data()
    sync_index = raw_data[:,1] == neu_sync
    start_time = np.min(raw_data[sync_index,0])
    index_after_sync = raw_data[:,0] > start_time
    clean_data = raw_data[index_after_sync,:]
    clean_data[:,0] = clean_data[:,0]-np.min(clean_data[:,0])
    ll = liquid._ts2sig(np.linspace(0,1000+delay,1000), clean_data[:,0], clean_data[:,1], func_timebase, 256 )
    ac=np.mean(ll**2,axis=0)
    max_pos = np.where(ac == np.max(ac))[0]
    plot(ll[:,max_pos])

